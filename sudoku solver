from pprint import pprint

def find_next_empty(puzzle):
    # finds the next row, col on puzzle that's not filled yet, -1
    # returns row, column tuple or None if there are no empty spaces left in puzzle
    
    for row in range(9):
        for column in range(9):
            if puzzle[row][column] == -1:
                return row, column
    return None, None 

def is_valid(puzzle, guess, row, col):
    # figures out whether the guess at the row/col of the puzzle is a valid guess
    # returns True or False
    
    # row
    row_values = puzzle[row]
    # if the number guessed is already in row, then it is False because it's not valid
    if guess in row_values:
        return False
        
    # column
    # puzzle[i] accesses each row, and [col] gets the number in that column and adds it column_values
    column_values = [puzzle[i][col] for i in range(9)]
    if guess in column_values:
        return False
    
    # 3 x 3 square
    # index of where the row/column starts of the square we want to check
    row_start = (row // 3) * 3 # 1 // 3 = 0, 5 // 3 = 1
    column_start = (col // 3) * 3
     # iterate over the 3 values in the row/column
    for r in range(row_start, row_start + 3):
        for c in range(column_start, column_start + 3):
            if puzzle[r][c] == guess:
                return False
    return True # guess is valid since it passed all the checks that returns False

def solve_sudoku(puzzle):
    # uses backtracking to solve puzzle that contains a lists of lists; each inner list is a row in the puzzle
    # returns solution
    
    # finds empty space on puzzle
    row, col = find_next_empty(puzzle)
    # if no more empty spaces
    if row is None: 
        return True

    # step 2: if there is a place to put a number, then make a guess between 1 and 9
    for guess in range(1,10):
        # step 3: check if this is a valid guess
        if is_valid(puzzle, guess, row, col):
            # step 3.1: if this is a valid guess, then place it at that spot on the puzzle
            puzzle[row][col] = guess
            # step 4: then we recursively call our solver!
            if solve_sudoku(puzzle):
                return True
        # step 5: it not valid or if nothing gets returned true, then we need to backtrack and try a new number
        puzzle[row][col] = -1 #reset value

    # step 6: if none of the numbers that we try work, then this puzzle is UNSOLVABLE!!
    return False

example_board = [
        [3, 9, -1,   -1, 5, -1,   -1, -1, -1],
        [-1, -1, -1,   2, -1, -1,   -1, -1, 5],
        [-1, -1, -1,   7, 1, 9,   -1, 8, -1],

        [-1, 5, -1,   -1, 6, 8,   -1, -1, -1],
        [2, -1, 6,   -1, -1, 3,   -1, -1, -1],
        [-1, -1, -1,   -1, -1, -1,   -1, -1, 4],

        [5, -1, -1,   -1, -1, -1,   -1, -1, -1],
        [6, 7, -1,   1, -1, 5,   -1, 4, -1],
        [1, -1, 9,   -1, -1, -1,   2, -1, -1]
    ]

solve_sudoku(example_board)
pprint(example_board)